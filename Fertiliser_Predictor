{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "932c5f58",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-06-14T15:20:06.710405Z",
     "iopub.status.busy": "2025-06-14T15:20:06.709919Z",
     "iopub.status.idle": "2025-06-14T15:20:08.723755Z",
     "shell.execute_reply": "2025-06-14T15:20:08.722698Z"
    },
    "papermill": {
     "duration": 2.020968,
     "end_time": "2025-06-14T15:20:08.725412",
     "exception": false,
     "start_time": "2025-06-14T15:20:06.704444",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/playground-series-s5e6/sample_submission.csv\n",
      "/kaggle/input/playground-series-s5e6/train.csv\n",
      "/kaggle/input/playground-series-s5e6/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "77773b94",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-14T15:20:08.734805Z",
     "iopub.status.busy": "2025-06-14T15:20:08.734358Z",
     "iopub.status.idle": "2025-06-14T15:20:08.739106Z",
     "shell.execute_reply": "2025-06-14T15:20:08.738217Z"
    },
    "papermill": {
     "duration": 0.010998,
     "end_time": "2025-06-14T15:20:08.740628",
     "exception": false,
     "start_time": "2025-06-14T15:20:08.729630",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bff90821",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-14T15:20:08.749945Z",
     "iopub.status.busy": "2025-06-14T15:20:08.749605Z",
     "iopub.status.idle": "2025-06-14T15:20:10.785753Z",
     "shell.execute_reply": "2025-06-14T15:20:10.784793Z"
    },
    "papermill": {
     "duration": 2.042808,
     "end_time": "2025-06-14T15:20:10.787733",
     "exception": false,
     "start_time": "2025-06-14T15:20:08.744925",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "sns.set_style('darkgrid')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e87ded2d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-14T15:20:10.796803Z",
     "iopub.status.busy": "2025-06-14T15:20:10.796323Z",
     "iopub.status.idle": "2025-06-14T15:20:11.911785Z",
     "shell.execute_reply": "2025-06-14T15:20:11.910745Z"
    },
    "papermill": {
     "duration": 1.12183,
     "end_time": "2025-06-14T15:20:11.913581",
     "exception": false,
     "start_time": "2025-06-14T15:20:10.791751",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['id', 'Temperature', 'Humidity', 'Moisture', 'Soil Type', 'Crop Type',\n",
      "       'Nitrogen', 'Potassium', 'Phosphorous', 'Fertilizer Name'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "train_df = pd.read_csv(\"/kaggle/input/playground-series-s5e6/train.csv\")\n",
    "# Rename the column \n",
    "train_df = train_df.rename(columns={'Temparature': 'Temperature'})\n",
    "print(train_df.columns) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fe9742d9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-14T15:20:11.922407Z",
     "iopub.status.busy": "2025-06-14T15:20:11.922065Z",
     "iopub.status.idle": "2025-06-14T15:20:11.945779Z",
     "shell.execute_reply": "2025-06-14T15:20:11.944858Z"
    },
    "papermill": {
     "duration": 0.029815,
     "end_time": "2025-06-14T15:20:11.947399",
     "exception": false,
     "start_time": "2025-06-14T15:20:11.917584",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Temperature</th>\n",
       "      <th>Humidity</th>\n",
       "      <th>Moisture</th>\n",
       "      <th>Soil Type</th>\n",
       "      <th>Crop Type</th>\n",
       "      <th>Nitrogen</th>\n",
       "      <th>Potassium</th>\n",
       "      <th>Phosphorous</th>\n",
       "      <th>Fertilizer Name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>37</td>\n",
       "      <td>70</td>\n",
       "      <td>36</td>\n",
       "      <td>Clayey</td>\n",
       "      <td>Sugarcane</td>\n",
       "      <td>36</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>28-28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>27</td>\n",
       "      <td>69</td>\n",
       "      <td>65</td>\n",
       "      <td>Sandy</td>\n",
       "      <td>Millets</td>\n",
       "      <td>30</td>\n",
       "      <td>6</td>\n",
       "      <td>18</td>\n",
       "      <td>28-28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>29</td>\n",
       "      <td>63</td>\n",
       "      <td>32</td>\n",
       "      <td>Sandy</td>\n",
       "      <td>Millets</td>\n",
       "      <td>24</td>\n",
       "      <td>12</td>\n",
       "      <td>16</td>\n",
       "      <td>17-17-17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>35</td>\n",
       "      <td>62</td>\n",
       "      <td>54</td>\n",
       "      <td>Sandy</td>\n",
       "      <td>Barley</td>\n",
       "      <td>39</td>\n",
       "      <td>12</td>\n",
       "      <td>4</td>\n",
       "      <td>10-26-26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>35</td>\n",
       "      <td>58</td>\n",
       "      <td>43</td>\n",
       "      <td>Red</td>\n",
       "      <td>Paddy</td>\n",
       "      <td>37</td>\n",
       "      <td>2</td>\n",
       "      <td>16</td>\n",
       "      <td>DAP</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id  Temperature  Humidity  Moisture Soil Type  Crop Type  Nitrogen  \\\n",
       "0   0           37        70        36    Clayey  Sugarcane        36   \n",
       "1   1           27        69        65     Sandy    Millets        30   \n",
       "2   2           29        63        32     Sandy    Millets        24   \n",
       "3   3           35        62        54     Sandy     Barley        39   \n",
       "4   4           35        58        43       Red      Paddy        37   \n",
       "\n",
       "   Potassium  Phosphorous Fertilizer Name  \n",
       "0          4            5           28-28  \n",
       "1          6           18           28-28  \n",
       "2         12           16        17-17-17  \n",
       "3         12            4        10-26-26  \n",
       "4          2           16             DAP  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "403d950c",
   "metadata": {
    "papermill": {
     "duration": 0.003552,
     "end_time": "2025-06-14T15:20:11.954927",
     "exception": false,
     "start_time": "2025-06-14T15:20:11.951375",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Feature Engineering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e6e99cde",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-14T15:20:11.964134Z",
     "iopub.status.busy": "2025-06-14T15:20:11.963813Z",
     "iopub.status.idle": "2025-06-14T15:20:18.348577Z",
     "shell.execute_reply": "2025-06-14T15:20:18.347716Z"
    },
    "papermill": {
     "duration": 6.391575,
     "end_time": "2025-06-14T15:20:18.350414",
     "exception": false,
     "start_time": "2025-06-14T15:20:11.958839",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import joblib\n",
    "from sklearn.preprocessing import LabelEncoder, StandardScaler\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "from lightgbm import LGBMClassifier\n",
    "from sklearn.metrics import average_precision_score\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "\n",
    "class FertilizerLGBMPredictor:\n",
    "    def __init__(self):\n",
    "        self.model = None\n",
    "        self.label_encoder = None\n",
    "        self.scaler = None\n",
    "        self.cat_features = ['Soil Type', 'Crop Type']\n",
    "        self.num_features = ['Temperature', 'Humidity', 'Moisture', 'Nitrogen', 'Potassium', 'Phosphorous']\n",
    "        self.pipeline = None\n",
    "\n",
    "    def feature_engineering(self, df):\n",
    "        df = df.copy()\n",
    "\n",
    "        # Feature interactions\n",
    "        df['N_K_ratio'] = df['Nitrogen'] / (df['Potassium'] + 1)\n",
    "        df['P_K_ratio'] = df['Phosphorous'] / (df['Potassium'] + 1)\n",
    "        df['Temp_Moisture'] = df['Temperature'] * df['Moisture']\n",
    "        df['Humidity_Moisture'] = df['Humidity'] * df['Moisture']\n",
    "\n",
    "        # Frequency encoding\n",
    "        df['Soil_Freq'] = df['Soil Type'].map(df['Soil Type'].value_counts(normalize=True))\n",
    "        df['Crop_Freq'] = df['Crop Type'].map(df['Crop Type'].value_counts(normalize=True))\n",
    "\n",
    "        return df\n",
    "\n",
    "    def fit(self, df):\n",
    "        df = df.copy()\n",
    "        df = self.feature_engineering(df)\n",
    "\n",
    "        X = df.drop(columns=['Fertilizer Name', 'id'])\n",
    "        y = df['Fertilizer Name']\n",
    "\n",
    "        self.label_encoder = LabelEncoder()\n",
    "        y_encoded = self.label_encoder.fit_transform(y)\n",
    "\n",
    "        preprocessor = ColumnTransformer([\n",
    "            ('num', StandardScaler(), self.num_features + ['N_K_ratio', 'P_K_ratio', 'Temp_Moisture', 'Humidity_Moisture', 'Soil_Freq', 'Crop_Freq']),\n",
    "            ('cat', OneHotEncoder(handle_unknown='ignore'), self.cat_features)\n",
    "        ])\n",
    "\n",
    "        self.pipeline = Pipeline([\n",
    "            ('pre', preprocessor),\n",
    "            ('clf', LGBMClassifier(n_estimators=500, learning_rate=0.05, random_state=42))\n",
    "        ])\n",
    "\n",
    "        self.pipeline.fit(X, y_encoded)\n",
    "\n",
    "    def predict_top3(self, df):\n",
    "        df = df.copy()\n",
    "        df = self.feature_engineering(df)\n",
    "        X = df.drop(columns=['id'], errors='ignore')\n",
    "        probas = self.pipeline.predict_proba(X)\n",
    "\n",
    "        top3 = np.argsort(probas, axis=1)[:, -3:][:, ::-1]\n",
    "        top3_labels = self.label_encoder.inverse_transform(top3.ravel()).reshape(top3.shape)\n",
    "        return top3_labels\n",
    "\n",
    "    def evaluate_map3(self, df):\n",
    "        df = df.copy()\n",
    "        df = self.feature_engineering(df)\n",
    "\n",
    "        X = df.drop(columns=['Fertilizer Name', 'id'])\n",
    "        y_true = df['Fertilizer Name']\n",
    "        y_encoded = self.label_encoder.transform(y_true)\n",
    "\n",
    "        probas = self.pipeline.predict_proba(X)\n",
    "        top3 = np.argsort(probas, axis=1)[:, -3:][:, ::-1]\n",
    "\n",
    "        def apk(actual, predicted, k=3):\n",
    "            if actual in predicted[:k]:\n",
    "                return 1.0 / (predicted[:k].tolist().index(actual) + 1)\n",
    "            return 0.0\n",
    "\n",
    "        scores = [apk(a, p) for a, p in zip(y_encoded, top3)]\n",
    "        return np.mean(scores)\n",
    "\n",
    "    def save(self, path_prefix='fertilizer_lgbm_model'):\n",
    "        joblib.dump(self.pipeline, f'{path_prefix}_pipeline.pkl')\n",
    "        joblib.dump(self.label_encoder, f'{path_prefix}_label_encoder.pkl')\n",
    "\n",
    "    def load(self, path_prefix='fertilizer_lgbm_model'):\n",
    "        self.pipeline = joblib.load(f'{path_prefix}_pipeline.pkl')\n",
    "        self.label_encoder = joblib.load(f'{path_prefix}_label_encoder.pkl')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52453eed",
   "metadata": {
    "papermill": {
     "duration": 0.0036,
     "end_time": "2025-06-14T15:20:18.358049",
     "exception": false,
     "start_time": "2025-06-14T15:20:18.354449",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Training model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7ff07abd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-14T15:20:18.367394Z",
     "iopub.status.busy": "2025-06-14T15:20:18.366753Z",
     "iopub.status.idle": "2025-06-14T15:21:45.593265Z",
     "shell.execute_reply": "2025-06-14T15:21:45.591907Z"
    },
    "papermill": {
     "duration": 87.233156,
     "end_time": "2025-06-14T15:21:45.595080",
     "exception": false,
     "start_time": "2025-06-14T15:20:18.361924",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.017094 seconds.\n",
      "You can set `force_row_wise=true` to remove the overhead.\n",
      "And if memory is not enough, you can set `force_col_wise=true`.\n",
      "[LightGBM] [Info] Total Bins 1252\n",
      "[LightGBM] [Info] Number of data points in the train set: 600000, number of used features: 28\n",
      "[LightGBM] [Info] Start training from score -1.884862\n",
      "[LightGBM] [Info] Start training from score -1.880055\n",
      "[LightGBM] [Info] Start training from score -1.897542\n",
      "[LightGBM] [Info] Start training from score -1.911546\n",
      "[LightGBM] [Info] Start training from score -1.909125\n",
      "[LightGBM] [Info] Start training from score -2.067671\n",
      "[LightGBM] [Info] Start training from score -2.094839\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# Train/validation split\n",
    "train_split, val_split = train_test_split(train_df, test_size=0.2, random_state=42, stratify=train_df['Fertilizer Name'])\n",
    "\n",
    "# Train model\n",
    "predictor = FertilizerLGBMPredictor()\n",
    "predictor.fit(train_split)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d67f3bda",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-14T15:21:45.604806Z",
     "iopub.status.busy": "2025-06-14T15:21:45.604421Z",
     "iopub.status.idle": "2025-06-14T15:21:45.876947Z",
     "shell.execute_reply": "2025-06-14T15:21:45.876023Z"
    },
    "papermill": {
     "duration": 0.279394,
     "end_time": "2025-06-14T15:21:45.878797",
     "exception": false,
     "start_time": "2025-06-14T15:21:45.599403",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "predictor.save()  # Saves model, scaler, and label encoder with default prefix"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7cfc6982",
   "metadata": {
    "papermill": {
     "duration": 0.003696,
     "end_time": "2025-06-14T15:21:45.886597",
     "exception": false,
     "start_time": "2025-06-14T15:21:45.882901",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Evaluate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5a02f4b4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-14T15:21:45.895560Z",
     "iopub.status.busy": "2025-06-14T15:21:45.895235Z",
     "iopub.status.idle": "2025-06-14T15:22:08.318167Z",
     "shell.execute_reply": "2025-06-14T15:22:08.317167Z"
    },
    "papermill": {
     "duration": 22.429286,
     "end_time": "2025-06-14T15:22:08.319715",
     "exception": false,
     "start_time": "2025-06-14T15:21:45.890429",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Validation MAP@3: 0.32419\n"
     ]
    }
   ],
   "source": [
    "val_map3 = predictor.evaluate_map3(val_split)\n",
    "print(f\"Validation MAP@3: {val_map3:.5f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f4cbdb8c",
   "metadata": {
    "papermill": {
     "duration": 0.003652,
     "end_time": "2025-06-14T15:22:08.327592",
     "exception": false,
     "start_time": "2025-06-14T15:22:08.323940",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Applying model on test and submission"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "de3b2e0e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-14T15:22:08.337081Z",
     "iopub.status.busy": "2025-06-14T15:22:08.336769Z",
     "iopub.status.idle": "2025-06-14T15:22:08.697925Z",
     "shell.execute_reply": "2025-06-14T15:22:08.696917Z"
    },
    "papermill": {
     "duration": 0.367589,
     "end_time": "2025-06-14T15:22:08.699501",
     "exception": false,
     "start_time": "2025-06-14T15:22:08.331912",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['id', 'Temperature', 'Humidity', 'Moisture', 'Soil Type', 'Crop Type',\n",
      "       'Nitrogen', 'Potassium', 'Phosphorous'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "test_df = pd.read_csv(\"/kaggle/input/playground-series-s5e6/test.csv\")\n",
    "test_df = test_df.rename(columns={'Temparature': 'Temperature'})\n",
    "print(test_df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "451a0136",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-14T15:22:08.709526Z",
     "iopub.status.busy": "2025-06-14T15:22:08.709215Z",
     "iopub.status.idle": "2025-06-14T15:22:46.855863Z",
     "shell.execute_reply": "2025-06-14T15:22:46.854917Z"
    },
    "papermill": {
     "duration": 38.15362,
     "end_time": "2025-06-14T15:22:46.857885",
     "exception": false,
     "start_time": "2025-06-14T15:22:08.704265",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "predictor = FertilizerLGBMPredictor()\n",
    "predictor.load()\n",
    "top3_preds = predictor.predict_top3(test_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d9dc8b59",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-14T15:22:46.867406Z",
     "iopub.status.busy": "2025-06-14T15:22:46.867103Z",
     "iopub.status.idle": "2025-06-14T15:22:47.211570Z",
     "shell.execute_reply": "2025-06-14T15:22:47.210627Z"
    },
    "papermill": {
     "duration": 0.351117,
     "end_time": "2025-06-14T15:22:47.213253",
     "exception": false,
     "start_time": "2025-06-14T15:22:46.862136",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "submission = pd.DataFrame({\n",
    "    'id': test_df['id'],\n",
    "    'Fertilizer Name': [' '.join(row) for row in top3_preds]\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "48e32a6c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-14T15:22:47.223172Z",
     "iopub.status.busy": "2025-06-14T15:22:47.222163Z",
     "iopub.status.idle": "2025-06-14T15:22:47.601786Z",
     "shell.execute_reply": "2025-06-14T15:22:47.600721Z"
    },
    "papermill": {
     "duration": 0.386175,
     "end_time": "2025-06-14T15:22:47.603492",
     "exception": false,
     "start_time": "2025-06-14T15:22:47.217317",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Submission file saved as 'submission.csv'\n"
     ]
    }
   ],
   "source": [
    "# Save submission file\n",
    "submission.to_csv('submission.csv', index=False)\n",
    "print(\"✅ Submission file saved as 'submission.csv'\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "06d471e8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-14T15:22:47.612778Z",
     "iopub.status.busy": "2025-06-14T15:22:47.612439Z",
     "iopub.status.idle": "2025-06-14T15:22:47.706391Z",
     "shell.execute_reply": "2025-06-14T15:22:47.705151Z"
    },
    "papermill": {
     "duration": 0.10069,
     "end_time": "2025-06-14T15:22:47.708314",
     "exception": false,
     "start_time": "2025-06-14T15:22:47.607624",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Fertilizer Name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>750000</td>\n",
       "      <td>DAP 28-28 14-35-14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>750001</td>\n",
       "      <td>17-17-17 10-26-26 20-20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>750002</td>\n",
       "      <td>10-26-26 14-35-14 20-20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>750003</td>\n",
       "      <td>14-35-14 17-17-17 Urea</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>750004</td>\n",
       "      <td>20-20 10-26-26 17-17-17</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id          Fertilizer Name\n",
       "0  750000       DAP 28-28 14-35-14\n",
       "1  750001  17-17-17 10-26-26 20-20\n",
       "2  750002  10-26-26 14-35-14 20-20\n",
       "3  750003   14-35-14 17-17-17 Urea\n",
       "4  750004  20-20 10-26-26 17-17-17"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "submission_df = pd.read_csv(\"/kaggle/working/submission.csv\")\n",
    "submission_df.head()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 12184666,
     "sourceId": 91717,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31040,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 167.204423,
   "end_time": "2025-06-14T15:22:48.735801",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-06-14T15:20:01.531378",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
